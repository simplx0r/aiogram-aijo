# src/scheduler.py
import logging
import datetime
from typing import Optional

import pytz # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.base import JobLookupError
from aiogram import Bot # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.utils.markdown import hbold
from aiogram.exceptions import TelegramAPIError

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
from src.db.models import Link
from src.config.config import settings
from src.bot import bot # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ ---
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ ---
# –ò—Å–ø–æ–ª—å–∑—É–µ–º AsyncIOScheduler –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å asyncio
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
scheduler = AsyncIOScheduler(timezone=MOSCOW_TZ)

# --- –§—É–Ω–∫—Ü–∏–∏ –∑–∞–¥–∞—á (Jobs) ---

async def send_reminder(link_id: int, minutes_before: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç."""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    from src.utils.callback_data import LinkCallback # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ utils
    from src.services import get_link_by_id, update_reminder_status # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç

    logging.info(f"Attempting to send {minutes_before}-min reminder for link_id={link_id}")
    link: Optional[Link] = await get_link_by_id(link_id) # –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ db

    if not link:
        logging.warning(f"Link with id={link_id} not found for reminder.")
        return
    if not link.is_active:
        logging.info(f"Link id={link_id} is inactive, skipping reminder.")
        return
    if minutes_before == 30 and link.reminder_30_sent:
        logging.info(f"30-min reminder for link id={link_id} already sent, skipping.")
        return
    if minutes_before == 10 and link.reminder_10_sent:
        logging.info(f"10-min reminder for link id={link_id} already sent, skipping.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_text = (
        f"üïí {hbold('–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!')}\n"
        f"–ß–µ—Ä–µ–∑ {minutes_before} –º–∏–Ω—É—Ç: {link.event_time_str or ''}\n\n"
        f"üì¢ {hbold('–ê–Ω–æ–Ω—Å!')}\n"
        f"{link.announcement_text}"
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data=LinkCallback(action="get_link", link_id=link_id).pack())]
        ])

        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–∞–∫ –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ?
        # –ü–æ–∫–∞ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ—Ç –∂–µ —Ç–æ–ø–∏–∫
        await bot.send_message(
            chat_id=settings.main_group_id,
            text=reminder_text,
            message_thread_id=settings.main_topic_id,
            reply_markup=keyboard, # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            disable_web_page_preview=True
            # reply_to_message_id=link.message_id_in_group # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–º
        )
        logging.info(f"Sent {minutes_before}-min reminder for link id={link_id} to group {settings.main_group_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ë–î
        await update_reminder_status(link_id, minutes_before) # –ù—É–∂–Ω–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ db

    except TelegramAPIError as e:
        logging.error(f"Failed to send {minutes_before}-min reminder for link id={link_id}: {e}")
    except Exception as e:
        logging.exception(f"Unexpected error sending reminder for link id={link_id}: {e}")


# --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º ---

async def schedule_reminders_for_link(link: Link):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Å—ã–ª–∫–∏."""
    assert not link.pending, f"Attempted to schedule reminder for a pending link ID: {link.id}"
    if not link or not link.event_time_utc or not link.id:
        logging.warning(f"Skipping scheduling for invalid link data: {link}")
        return

    event_time_utc_aware = link.event_time_utc
    # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏–∑ –ë–î –Ω–∞–∏–≤–Ω–æ–µ (—Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ), –¥–µ–ª–∞–µ–º –µ–≥–æ aware UTC
    if event_time_utc_aware.tzinfo is None:
        event_time_utc_aware = event_time_utc_aware.replace(tzinfo=datetime.timezone.utc)

    now_utc = datetime.datetime.now(datetime.timezone.utc)
    link_id = link.id
    job_id_base = f"reminder_link_{link_id}"

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º 30-–º–∏–Ω—É—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if not link.reminder_30_sent:
        reminder_time_30 = event_time_utc_aware - datetime.timedelta(minutes=30)
        if reminder_time_30 > now_utc:
            job_id_30 = f"{job_id_base}_30min"
            try:
                scheduler.add_job(
                    send_reminder,
                    'date', # –ó–∞–ø—É—Å–∫ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                    run_date=reminder_time_30,
                    args=[link_id, 30],
                    id=job_id_30,
                    replace_existing=True, # –ó–∞–º–µ–Ω–∏—Ç—å, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    misfire_grace_time=60 # –°–µ–∫—É–Ω–¥—ã –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –æ–ø–æ–∑–¥–∞–Ω–∏—è
                )
                logging.info(f"Scheduled 30-min reminder for link id={link_id} at {reminder_time_30.astimezone(MOSCOW_TZ)}")
            except Exception as e:
                logging.error(f"Error scheduling 30-min reminder for link id={link_id}: {e}")
        else:
             logging.info(f"30-min reminder time for link id={link_id} is in the past, skipping scheduling.")


    # –ü–ª–∞–Ω–∏—Ä—É–µ–º 10-–º–∏–Ω—É—Ç–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if not link.reminder_10_sent:
        reminder_time_10 = event_time_utc_aware - datetime.timedelta(minutes=10)
        if reminder_time_10 > now_utc:
             job_id_10 = f"{job_id_base}_10min"
             try:
                scheduler.add_job(
                    send_reminder,
                    'date',
                    run_date=reminder_time_10,
                    args=[link_id, 10],
                    id=job_id_10,
                    replace_existing=True,
                    misfire_grace_time=60
                )
                logging.info(f"Scheduled 10-min reminder for link id={link_id} at {reminder_time_10.astimezone(MOSCOW_TZ)}")
             except Exception as e:
                 logging.error(f"Error scheduling 10-min reminder for link id={link_id}: {e}")
        else:
            logging.info(f"10-min reminder time for link id={link_id} is in the past, skipping scheduling.")


async def load_scheduled_jobs():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    logging.info("Loading scheduled jobs for PUBLISHED links...")
    # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç
    from src.services.link_service import get_active_links_with_reminders
    links = await get_active_links_with_reminders() # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –û–ü–£–ë–õ–ò–ö–û–í–ê–ù–ù–´–ï —Å—Å—ã–ª–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º
    count = 0
    for link in links:
        await schedule_reminders_for_link(link)
        count += 1
    logging.info(f"Scheduled reminders for {count} links.")


def start_scheduler():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    try:
        if not scheduler.running:
            scheduler.start()
            logging.info("Scheduler started.")
        else:
            logging.info("Scheduler already running.")
    except Exception as e:
        logging.exception(f"Failed to start scheduler: {e}")

def stop_scheduler():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
    try:
        if scheduler.running:
            scheduler.shutdown(wait=False) # wait=False —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            logging.info("Scheduler shut down.")
    except Exception as e:
        logging.error(f"Error shutting down scheduler: {e}")

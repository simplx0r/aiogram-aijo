# src/handlers/links.py
import logging
from typing import Optional
from aiogram import Bot, Router, F
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest

# –£—Ç–∏–ª–∏—Ç—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from src.config import load_config
from src.utils.date_parser import parse_datetime_string, DateTimeParseError, PastDateTimeError
from src.utils.keyboards import LinkCallbackFactory, get_link_keyboard
from src.utils.constants import URL_REGEX, DATE_REGEX, TIME_REGEX

# –°–µ—Ä–≤–∏—Å—ã –ë–î
from src.services.link_service import (
    add_link as db_add_link,
    update_link_message_id as db_update_link_message_id,
    get_link_by_id as db_get_link_by_id
)
from src.services.request_log_service import (
    log_link_request as db_log_link_request
)
from src.services.stats_service import (
    increment_interview_count as db_increment_interview_count
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = load_config()
GROUP_CHAT_ID = config.tg_bot.group_chat_id

router = Router()

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ --- #

@router.message(Command("addlink"))
async def add_link(message: Message, command: CommandObject, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addlink."""
    if not command.args:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /addlink https://example.com [–î–î.–ú–ú –ß–ß:–ú–ú] [–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è]"
        )
        return

    args_str = command.args.strip()
    command_parts = args_str.split()

    link_url: Optional[str] = None
    date_str: Optional[str] = None
    time_str: Optional[str] = None
    announcement_text_parts = []

    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å —Å—Å—ã–ª–∫—É, –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    current_part_index = 0

    # 1. –°—Å—ã–ª–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
    if URL_REGEX.match(command_parts[current_part_index]):
        link_url = command_parts[current_part_index]
        current_part_index += 1
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")
        return

    # 2. –î–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å)
    if current_part_index < len(command_parts) and DATE_REGEX.match(command_parts[current_part_index]):
        date_str = command_parts[current_part_index]
        current_part_index += 1

    # 3. –í—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–ª–µ–¥—É–µ—Ç –∑–∞ –¥–∞—Ç–æ–π –ò–õ–ò –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –≤—Ä–µ–º—è)
    if current_part_index < len(command_parts) and TIME_REGEX.match(command_parts[current_part_index]):
        # –í—Ä–µ–º—è –º–æ–∂–µ—Ç –∏–¥—Ç–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å—Å—ã–ª–∫–∏, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã
        if date_str is None and current_part_index == 1:
             time_str = command_parts[current_part_index]
             current_part_index += 1
        # –í—Ä–µ–º—è –∏–¥–µ—Ç –ø–æ—Å–ª–µ –¥–∞—Ç—ã
        elif date_str is not None and current_part_index == 2:
             time_str = command_parts[current_part_index]
             current_part_index += 1
        # –ò–Ω–∞—á–µ - —ç—Ç–æ –Ω–µ –≤—Ä–µ–º—è, –∞ —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞

    # 4. –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
    announcement_text_parts = command_parts[current_part_index:]
    announcement_text = " ".join(announcement_text_parts) if announcement_text_parts else "–ê–Ω–æ–Ω—Å"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏ –≤—Ä–µ–º—è, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    if (date_str and not time_str) or (not date_str and time_str):
        await message.answer("–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏ –¥–∞—Ç—É, –∏ –≤—Ä–µ–º—è (–î–î.–ú–ú –ß–ß:–ú–ú). –õ–∏–±–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –≤–æ–≤—Å–µ.")
        return

    event_time_utc = None
    event_time_str = None
    if date_str and time_str:
        try:
            event_time_utc = parse_datetime_string(date_str, time_str)
            event_time_str = f"{date_str} {time_str}"
        except DateTimeParseError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú(.–ì–ì–ì–ì) –∏ –ß–ß:–ú–ú.")
            return
        except PastDateTimeError:
            await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
        except Exception as e:
            logging.error(f"Error parsing date/time '{date_str} {time_str}': {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return

    # --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î --- #
    added_link = await db_add_link(
        message_id=None, # message_id –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
        link_url=link_url,
        announcement_text=announcement_text,
        added_by_user_id=message.from_user.id,
        event_time_str=event_time_str,
        event_time_utc=event_time_utc
    )

    if not added_link or added_link.id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É --- #
    group_message_text = f"{added_link.announcement_text}\n\n" \
                         f"–î–æ–±–∞–≤–∏–ª: {message.from_user.full_name}"
    if added_link.event_time_str:
        group_message_text += f"\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {added_link.event_time_str} –ú–°–ö"

    keyboard = get_link_keyboard(added_link.id)

    try:
        sent_message = await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=group_message_text,
            reply_markup=keyboard,
            disable_web_page_preview=True # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é —Å—Å—ã–ª–∫–∏
        )
        logging.info(f"Sent message for link_id {added_link.id} to group {GROUP_CHAT_ID}, message_id={sent_message.message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db_update_link_message_id(added_link.id, sent_message.message_id)
        if success:
            await message.reply(
                f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É! "
                f"{f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {event_time_str} –ú–°–ö.' if event_time_str else ''}"
            )
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID, —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ —É—Å–ø–µ—Ö–æ–º –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏.
            # –ù—É–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø—ã—Ç–∞—Ç—å—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã.
            logging.error(f"Failed to update message_id {sent_message.message_id} for link_id {added_link.id} in DB.")
            # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            try:
                await bot.delete_message(chat_id=GROUP_CHAT_ID, message_id=sent_message.message_id)
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è. –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å–Ω–æ–≤–∞.")
            except Exception as del_err:
                logging.error(f"Failed to delete message {sent_message.message_id} from group {GROUP_CHAT_ID} after DB update failure: {del_err}")
                await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è. –ó–∞–ø–∏—Å—å –≤ –≥—Ä—É–ø–ø–µ –º–æ–≥–ª–∞ –æ—Å—Ç–∞—Ç—å—Å—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")

    except TelegramBadRequest as e:
        logging.error(f"Telegram error sending link message to group {GROUP_CHAT_ID}: {e}")
        # TODO: –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –∏–∑ –ë–î, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É?
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É. –í–æ–∑–º–æ–∂–Ω–æ, —É –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –∏–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logging.exception(f"Unexpected error sending link message to group {GROUP_CHAT_ID}: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –≥—Ä—É–ø–ø—É.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É" --- #

@router.callback_query(LinkCallbackFactory.filter(F.action == "get"))
async def get_link(query: CallbackQuery, callback_data: LinkCallbackFactory, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    link_id = callback_data.link_id
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    logging.info(f"User {user_id} ({username}) requested link_id {link_id}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    await db_log_link_request(user_id, username, link_id)
    await db_increment_interview_count(user_id, username)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
    link_record = await db_get_link_by_id(link_id)

    if link_record:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            await bot.send_message(
                chat_id=user_id,
                text=f"–î–µ—Ä–∂–∏ —Å—Å—ã–ª–∫—É:\n{link_record.link_url}",
                disable_web_page_preview=False # –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –õ–°
            )
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–ª–∞ "–≥—Ä—É–∑–∏—Ç—å—Å—è"
            await query.answer(text="–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!", show_alert=False)
            logging.info(f"Sent link {link_id} to user {user_id}")
        except TelegramBadRequest as e:
            # –ß–∞—Å—Ç–∞—è –æ—à–∏–±–∫–∞ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º
            if "bot was blocked by the user" in str(e) or "user not found" in str(e) or "chat not found" in str(e):
                logging.warning(f"Cannot send link {link_id} to user {user_id}: Bot blocked or chat not started.")
                await query.answer(text="–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (–Ω–∞–ø–∏—à–∏—Ç–µ /start) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
            else:
                logging.error(f"Telegram error sending link {link_id} to user {user_id}: {e}")
                await query.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏.", show_alert=True)
        except Exception as e:
            logging.exception(f"Unexpected error sending link {link_id} to user {user_id}: {e}")
            await query.answer(text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.", show_alert=True)
    else:
        logging.warning(f"User {user_id} requested non-existent link_id {link_id}")
        await query.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)

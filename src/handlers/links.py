# src/handlers/links.py
import logging
import asyncio
import re
from typing import Optional, NamedTuple
from loguru import logger # Added logger import
from aiogram import Bot, Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.formatting import Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hlink

# –£—Ç–∏–ª–∏—Ç—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from src.config.config import settings
from src.utils.constants import URL_REGEX, DATE_REGEX, TIME_REGEX
from src.utils.date_parser import parse_datetime_string, DateTimeParseError, PastDateTimeError
from src.utils.callback_data import ChatSelectCallback, LinkCallbackFactory # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ LinkCallbackFactory
from src.utils.keyboards import get_link_keyboard, create_publish_keyboard # –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç LinkCallbackFactory –æ—Ç—Å—é–¥–∞
from src.utils.misc import get_random_phrase
from src.db.models import Link

# –°–µ—Ä–≤–∏—Å—ã –ë–î
from src.services.link_service import (
    add_link as db_add_link,
    update_link_message_id as db_update_link_message_id,
    get_link_by_id as db_get_link_by_id
)
from src.services.request_log_service import (
    log_link_request as db_log_link_request
)
from src.services.stats_service import (
    increment_interview_count as db_increment_interview_count
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
router = Router()

# --- –ù–û–í–û–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ --- #
class AddLinkArgs(NamedTuple):
    link_url: str
    date_str: Optional[str]
    time_str: Optional[str]
    announcement_text: str

class ArgumentParsingError(ValueError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã."""
    pass
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û --- #

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ --- #
def _parse_addlink_args(args_str: Optional[str]) -> AddLinkArgs:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /addlink.

    Args:
        args_str: –°—Ç—Ä–æ–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (command.args).

    Returns:
        AddLinkArgs: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.

    Raises:
        ArgumentParsingError: –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.
    """
    if not args_str:
        raise ArgumentParsingError(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /addlink https://example.com [–î–î.–ú–ú –ß–ß:–ú–ú] [–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è]"
        )

    command_parts = args_str.strip().split()

    link_url: Optional[str] = None
    date_str: Optional[str] = None
    time_str: Optional[str] = None
    announcement_text_parts = []

    current_part_index = 0

    # 1. –°—Å—ã–ª–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
    if current_part_index < len(command_parts) and URL_REGEX.match(command_parts[current_part_index]):
        link_url = command_parts[current_part_index]
        current_part_index += 1
    else:
        raise ArgumentParsingError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

    # 2. –î–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å)
    if current_part_index < len(command_parts) and DATE_REGEX.match(command_parts[current_part_index]):
        date_str = command_parts[current_part_index]
        current_part_index += 1

    # 3. –í—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–ª–µ–¥—É–µ—Ç –∑–∞ –¥–∞—Ç–æ–π –ò–õ–ò –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –≤—Ä–µ–º—è)
    if current_part_index < len(command_parts) and TIME_REGEX.match(command_parts[current_part_index]):
        is_time_immediately_after_link = (date_str is None and current_part_index == 1)
        is_time_after_date = (date_str is not None and current_part_index == 2)
        if is_time_immediately_after_link or is_time_after_date:
            time_str = command_parts[current_part_index]
            current_part_index += 1

    # 4. –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
    announcement_text_parts = command_parts[current_part_index:]
    announcement_text = " ".join(announcement_text_parts) if announcement_text_parts else "–ê–Ω–æ–Ω—Å"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏ –≤—Ä–µ–º—è, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    if (date_str and not time_str) or (not date_str and time_str):
        raise ArgumentParsingError("–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏ –¥–∞—Ç—É, –∏ –≤—Ä–µ–º—è (–î–î.–ú–ú –ß–ß:–ú–ú). –õ–∏–±–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –≤–æ–≤—Å–µ.")

    return AddLinkArgs(
        link_url=link_url,
        date_str=date_str,
        time_str=time_str,
        announcement_text=announcement_text
    )


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω—Å–∞ –≤ –≥—Ä—É–ø–ø—É --- #
async def _send_announcement_to_group(bot: Bot, link: Link, target_chat_id: int) -> Optional[types.Message]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω—Å —Å—Å—ã–ª–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î."""
    if not link:
        return None

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    base_text = f"üîó –ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID: {link.added_by_user_id})\n\nURL: {link.link_url}"
    if link.announcement_text:
        group_message_text = f"{base_text}\n\n{link.announcement_text}"
    else:
        group_message_text = base_text

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ
    keyboard = get_link_keyboard(link.id)

    send_kwargs = {
        "chat_id": target_chat_id,
        "text": group_message_text,
        "reply_markup": keyboard,
        "disable_web_page_preview": True
    }

    # --- –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º message_thread_id, –µ—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç –∏ —Ç–æ–ø–∏–∫ –∑–∞–¥–∞–Ω --- #
    if settings.main_group_id and settings.main_topic_id and target_chat_id == settings.main_group_id:
        logger.debug(f"Sending to main group {target_chat_id} with topic ID {settings.main_topic_id}")
        send_kwargs["message_thread_id"] = settings.main_topic_id
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û --- #

    try:
        sent_message = await bot.send_message(**send_kwargs)
        logging.info(f"Sent message for link_id {link.id} to group {target_chat_id}, message_id={sent_message.message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –∏ chat_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        # –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ callback_handler'–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        # success = await db_update_link_message_id(link.id, sent_message.message_id, sent_message.chat.id)
        # if success:
        #     return sent_message
        # else:
        #     # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID –≤ –ë–î - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞.
        #     logger.error(f"Failed to update message_id {sent_message.message_id} for link_id {link.id} in DB.")
        #     # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
        #     try:
        #         await bot.delete_message(chat_id=target_chat_id, message_id=sent_message.message_id)
        #         logger.warning(f"Deleted group message {sent_message.message_id} due to DB update failure.")
        #     except Exception as del_err:
        #         logger.error(f"Failed to delete group message {sent_message.message_id} after DB error: {del_err}")
        #     return None # –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –±—É–¥–µ—Ç –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
        return sent_message

    except TelegramBadRequest as e:
        # --- –ù–û–í–û–ï: –£—Ç–æ—á–Ω—è–µ–º –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—à–∏–±–∫–∏ TOPIC_CLOSED --- #
        error_message = f"Telegram API error sending link message to group {target_chat_id} for link {link.id}: {e}"
        if "TOPIC_CLOSED" in str(e):
            error_message += " (Check if the target topic exists and is open)"
        logging.error(error_message)
        # --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û --- #
        return None
    except Exception as e:
        logging.exception(f"Unexpected error sending link message to group {target_chat_id} for link {link.id}: {e}")
        return None


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ --- #

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addlink –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.
#     –°–æ–∑–¥–∞–µ—Ç 'pending' —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
@router.message(Command("addlink"))
@router.message(F.text & F.text.regexp(URL_REGEX)) # –î–æ–±–∞–≤–ª–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å URL
async def handle_add_link(message: Message, command: Optional[CommandObject] = None): 
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addlink –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.
    –°–æ–∑–¥–∞–µ—Ç 'pending' —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    if not message.from_user:
        logger.warning("Received /addlink command without user info.")
        return

    user_id = message.from_user.id
    username = message.from_user.username # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
    first_name = message.from_user.first_name # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
    last_name = message.from_user.last_name # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ last_name
    user_identifier = username or first_name or str(user_id) # –û–±–Ω–æ–≤–ª—è–µ–º user_identifier –¥–ª—è –ø–æ–ª–Ω–æ—Ç—ã

    logger.info(f"Handling link add request from user {user_id} ({user_identifier})")

    link_url: Optional[str] = None
    raw_text: Optional[str] = None

    if message.text:
        link_url_match = URL_REGEX.search(message.text)
        link_url = link_url_match.group(0) if link_url_match else None
        raw_text = message.text # –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    elif message.forward_from or message.forward_from_chat:
        if message.forward_from:
            logger.info(f"Received forwarded message from user {message.forward_from.id}")
        elif message.forward_from_chat:
            logger.info(f"Received forwarded message from chat {message.forward_from_chat.id}")
        if message.forward_date:
            logger.info(f"Forwarded message date: {message.forward_date}")
        if message.text:
            link_url_match = URL_REGEX.search(message.text)
            link_url = link_url_match.group(0) if link_url_match else None
            raw_text = message.text # –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è

    if not link_url:
        logger.warning(f"No link found in message from user {message.from_user.id}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    event_time_str: Optional[str] = None
    event_time_utc: Optional[datetime] = None
    announcement_text: str = link_url # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç - —ç—Ç–æ —Å–∞–º–∞ —Å—Å—ã–ª–∫–∞

    if raw_text:
        time_match = TIME_REGEX.search(raw_text)
        if time_match:
            event_time_str = time_match.group(0)
            announcement_text = raw_text.replace(time_match.group(0), "").replace(link_url, "").strip()
            if not announcement_text: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                announcement_text = link_url
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            announcement_text = raw_text.replace(link_url, "").strip()
            if not announcement_text:
                announcement_text = link_url

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –∫–∞–∫ 'pending'
    pending_link = await db_add_link(
        user_id=user_id,
        username=username, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        first_name=first_name, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        last_name=last_name, # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        link_url=link_url,
        event_time_str=event_time_str,
        event_time_utc=event_time_utc,
        announcement_text=announcement_text
    )

    if not pending_link or not pending_link.id:
        logger.error(f"Failed to create pending link for URL: {link_url} by user {user_id}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    link_id = pending_link.id
    logger.info(f"Created pending link ID: {link_id} for user {user_id}. URL: {link_url}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
    target_chats = settings.announcement_target_chats
    if not target_chats:
        logger.warning(f"No target chats configured for announcements. Link ID {link_id} remains pending.")
        await message.reply(f"–°—Å—ã–ª–∫–∞ {hlink('—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', link_url)}, –Ω–æ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    builder = InlineKeyboardBuilder()
    for chat in target_chats:
        builder.button(
            text=chat.name,
            callback_data=ChatSelectCallback(link_id=link_id, target_chat_id=chat.id)
        )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã?
    # builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=ChatSelectCallback(action="cancel", link_id=link_id))
    builder.adjust(1) # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(
        f"–ö—É–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω—Å –¥–ª—è —Å—Å—ã–ª–∫–∏: {hlink(announcement_text or link_url, link_url)}?",
        reply_markup=builder.as_markup()
    )

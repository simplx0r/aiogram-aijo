# src/handlers/links.py
import logging
from typing import Optional, NamedTuple
from aiogram import Bot, Router, F, types
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery
from aiogram.exceptions import TelegramBadRequest
from aiogram.utils.formatting import Text
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hlink

# –£—Ç–∏–ª–∏—Ç—ã, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
from src.config.config import settings
from src.utils.constants import URL_REGEX, DATE_REGEX, TIME_REGEX
from src.utils.date_parser import parse_datetime_string, DateTimeParseError, PastDateTimeError
from src.utils.callback_data import ChatSelectCallback # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
from src.utils.keyboards import LinkCallbackFactory, get_link_keyboard # –û—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Å—ã–ª–∫–∏
from src.utils.misc import get_random_phrase
from src.db.models import Link

# –°–µ—Ä–≤–∏—Å—ã –ë–î
from src.services.link_service import (
    add_link as db_add_link,
    update_link_message_id as db_update_link_message_id,
    get_link_by_id as db_get_link_by_id
)
from src.services.request_log_service import (
    log_link_request as db_log_link_request
)
from src.services.stats_service import (
    increment_interview_count as db_increment_interview_count
)
from src.services.user_service import add_or_update_user

# --- –ù–û–í–û–ï: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ --- #
class AddLinkArgs(NamedTuple):
    link_url: str
    date_str: Optional[str]
    time_str: Optional[str]
    announcement_text: str

class ArgumentParsingError(ValueError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã."""
    pass
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û --- #

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
GROUP_CHAT_ID = settings.main_group_id

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ --- #
def _parse_addlink_args(args_str: Optional[str]) -> AddLinkArgs:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã /addlink.

    Args:
        args_str: –°—Ç—Ä–æ–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (command.args).

    Returns:
        AddLinkArgs: –†–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.

    Raises:
        ArgumentParsingError: –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è.
    """
    if not args_str:
        raise ArgumentParsingError(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å—Å—ã–ª–∫—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /addlink https://example.com [–î–î.–ú–ú –ß–ß:–ú–ú] [–¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è]"
        )

    command_parts = args_str.strip().split()

    link_url: Optional[str] = None
    date_str: Optional[str] = None
    time_str: Optional[str] = None
    announcement_text_parts = []

    current_part_index = 0

    # 1. –°—Å—ã–ª–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π)
    if current_part_index < len(command_parts) and URL_REGEX.match(command_parts[current_part_index]):
        link_url = command_parts[current_part_index]
        current_part_index += 1
    else:
        raise ArgumentParsingError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏. –°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://")

    # 2. –î–∞—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–ª–µ–¥—É—é—â–∞—è —á–∞—Å—Ç—å)
    if current_part_index < len(command_parts) and DATE_REGEX.match(command_parts[current_part_index]):
        date_str = command_parts[current_part_index]
        current_part_index += 1

    # 3. –í—Ä–µ–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —Å–ª–µ–¥—É–µ—Ç –∑–∞ –¥–∞—Ç–æ–π –ò–õ–ò –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –Ω–æ –µ—Å—Ç—å –≤—Ä–µ–º—è)
    if current_part_index < len(command_parts) and TIME_REGEX.match(command_parts[current_part_index]):
        is_time_immediately_after_link = (date_str is None and current_part_index == 1)
        is_time_after_date = (date_str is not None and current_part_index == 2)
        if is_time_immediately_after_link or is_time_after_date:
            time_str = command_parts[current_part_index]
            current_part_index += 1

    # 4. –¢–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω–æ–µ)
    announcement_text_parts = command_parts[current_part_index:]
    announcement_text = " ".join(announcement_text_parts) if announcement_text_parts else "–ê–Ω–æ–Ω—Å"

    # –í–∞–ª–∏–¥–∞—Ü–∏—è: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∏ –≤—Ä–µ–º—è, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
    if (date_str and not time_str) or (not date_str and time_str):
        raise ArgumentParsingError("–î–ª—è —É–∫–∞–∑–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏ –¥–∞—Ç—É, –∏ –≤—Ä–µ–º—è (–î–î.–ú–ú –ß–ß:–ú–ú). –õ–∏–±–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∏—Ö –≤–æ–≤—Å–µ.")

    return AddLinkArgs(
        link_url=link_url,
        date_str=date_str,
        time_str=time_str,
        announcement_text=announcement_text
    )


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω—Å–∞ –≤ –≥—Ä—É–ø–ø—É --- #
async def _send_announcement_to_group(bot: Bot, link: Link) -> bool:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω—Å —Å—Å—ã–ª–∫–∏ –≤ –≥—Ä—É–ø–ø—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç message_id –≤ –ë–î.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        link: –û–±—ä–µ–∫—Ç Link —Å –¥–∞–Ω–Ω—ã–º–∏ (–≤–∫–ª—é—á–∞—è link.id).

    Returns:
        bool: True, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ message_id –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î,
              False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ.
    """
    group_message_text = f"{link.announcement_text}\n\n" \
                         f"–î–æ–±–∞–≤–∏–ª: [User {link.added_by_user_id}]" # TODO: –ü–æ–ª—É—á–∏—Ç—å –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –ò–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å ID?
                         # f"–î–æ–±–∞–≤–∏–ª: {message.from_user.full_name}" # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∑–¥–µ—Å—å
    if link.event_time_str:
        group_message_text += f"\nüìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {link.event_time_str} –ú–°–ö"

    keyboard = get_link_keyboard(link.id)

    try:
        sent_message = await bot.send_message(
            chat_id=GROUP_CHAT_ID,
            text=group_message_text,
            reply_markup=keyboard,
            disable_web_page_preview=True
        )
        logging.info(f"Sent message for link_id {link.id} to group {GROUP_CHAT_ID}, message_id={sent_message.message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = await db_update_link_message_id(link.id, sent_message.message_id)
        if success:
            return True
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å ID –≤ –ë–î - —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞.
            logging.error(f"Failed to update message_id {sent_message.message_id} for link_id {link.id} in DB.")
            # –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã
            try:
                await bot.delete_message(chat_id=GROUP_CHAT_ID, message_id=sent_message.message_id)
                logging.warning(f"Deleted group message {sent_message.message_id} due to DB update failure.")
            except Exception as del_err:
                logging.error(f"Failed to delete message {sent_message.message_id} from group {GROUP_CHAT_ID} after DB update failure: {del_err}")
            return False # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–± –æ—à–∏–±–∫–µ

    except TelegramBadRequest as e:
        logging.error(f"Telegram error sending link message to group {GROUP_CHAT_ID} for link {link.id}: {e}")
        return False
    except Exception as e:
        logging.exception(f"Unexpected error sending link message to group {GROUP_CHAT_ID} for link {link.id}: {e}")
        return False


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é --- #
async def _send_link_to_user(bot: Bot, user_id: int, link_url: str, link_id: int) -> tuple[bool, str]:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –ª–∏—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.
        link_url: URL —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.
        link_id: ID —Å—Å—ã–ª–∫–∏ (–¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è).

    Returns:
        tuple[bool, str]: –ö–æ—Ä—Ç–µ–∂ (success: bool, message: str).
                        success=True, message="–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞..."
                        success=False, message="–û—à–∏–±–∫–∞: –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å..."
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É
    random_phrase = get_random_phrase()
    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"{random_phrase}\n{link_url}",
            disable_web_page_preview=False # –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–≤—å—é –¥–ª—è –õ–°
        )
        logging.info(f"Sent link {link_id} to user {user_id}")
        return True, "–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!"
    except TelegramBadRequest as e:
        if "bot was blocked by the user" in str(e) or "user not found" in str(e) or "chat not found" in str(e):
            logging.warning(f"Cannot send link {link_id} to user {user_id}: Bot blocked or chat not started.")
            return False, "–ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π (–Ω–∞–ø–∏—à–∏—Ç–µ /start) –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        else:
            logging.error(f"Telegram error sending link {link_id} to user {user_id}: {e}")
            return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏."
    except Exception as e:
        logging.exception(f"Unexpected error sending link {link_id} to user {user_id}: {e}")
        return False, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞."


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ --- #

@router.message(Command("addlink"))
async def add_link(message: Message, command: CommandObject, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /addlink."""
    # --- –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤—ã–Ω–µ—Å–µ–Ω --- #
    try:
        parsed_args = _parse_addlink_args(command.args)
    except ArgumentParsingError as e:
        await message.answer(str(e))
        return

    # --- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ --- #
    link_url = parsed_args.link_url
    date_str = parsed_args.date_str
    time_str = parsed_args.time_str
    announcement_text = parsed_args.announcement_text

    # --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ --- #
    event_time_utc = None
    event_time_str = None
    if date_str and time_str: # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–∂–µ —Å–¥–µ–ª–∞–Ω–∞ –≤ –ø–∞—Ä—Å–µ—Ä–µ
        try:
            event_time_utc = parse_datetime_string(date_str, time_str)
            event_time_str = f"{date_str} {time_str}"
        except DateTimeParseError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú(.–ì–ì–ì–ì) –∏ –ß–ß:–ú–ú.")
            return
        except PastDateTimeError:
            await message.answer("–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.")
            return
        except Exception as e:
            logging.error(f"Error parsing date/time '{date_str} {time_str}': {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return

    # --- –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ë–î --- #
    added_link = await db_add_link(
        message_id=None, # message_id –¥–æ–±–∞–≤–∏–º –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
        link_url=link_url,
        announcement_text=announcement_text,
        added_by_user_id=message.from_user.id,
        event_time_str=event_time_str,
        event_time_utc=event_time_utc
    )

    if not added_link or added_link.id is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –≤—ã–Ω–µ—Å–µ–Ω–∞ --- #
    send_success = await _send_announcement_to_group(bot, added_link)

    if send_success:
        await message.reply(
            f"–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É! "
            f"{f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {event_time_str} –ú–°–ö.' if event_time_str else ''}"
        )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        # –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–æ–≥–æ, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–∞ _send_announcement_to_group
        # –°–µ–π—á–∞—Å –æ–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False, –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–ª–∏ –ª–æ–≥–∏
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –≤ –ë–î. "
            "–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–æ –∞–Ω–æ–Ω—Å –≤ –≥—Ä—É–ø–ø–µ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∏–ª–∏ –±—ã—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. "
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–¥–∞–ª–∏—Ç—å added_link –∏–∑ –ë–î, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å?
        )


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É" --- #

@router.callback_query(LinkCallbackFactory.filter(F.action == "get"))
async def get_link(query: CallbackQuery, callback_data: LinkCallbackFactory, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏."""
    link_id = callback_data.link_id
    user_id = query.from_user.id
    username = query.from_user.username or query.from_user.full_name

    logging.info(f"User {user_id} ({username}) requested link_id {link_id}")

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    await db_log_link_request(user_id, username, link_id)
    await db_increment_interview_count(user_id, username)

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –∏–∑ –ë–î
    link_record = await db_get_link_by_id(link_id)

    if link_record:
        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –≤—ã–Ω–µ—Å–µ–Ω–∞ --- #
        send_success, message_text = await _send_link_to_user(bot, user_id, link_record.link_url, link_id)

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±–µ–∫
        await query.answer(text=message_text, show_alert=not send_success) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º alert –ø—Ä–∏ –æ—à–∏–±–∫–µ

    else:
        logging.warning(f"User {user_id} requested non-existent link_id {link_id}")
        await query.answer(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞.", show_alert=True)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ --- #

@router.message(Command("addlink"))
async def handle_add_link(message: Message, command: Optional[CommandObject] = None, bot: Optional[Bot] = None):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addlink –∏–ª–∏ –ø–µ—Ä–µ—Å—ã–ª–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏.
    –°–æ–∑–¥–∞–µ—Ç 'pending' —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.
    """
    if not message.from_user:
        logger.warning("Received /addlink command without user info.")
        return

    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    logger.info(f"Handling link add request from user {user_id} ({username or first_name})")

    link_url: Optional[str] = None
    raw_text: Optional[str] = None

    if message.text:
        link_url_match = URL_REGEX.search(message.text)
        link_url = link_url_match.group(0) if link_url_match else None
        raw_text = message.text # –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è
    elif message.forward_from or message.forward_from_chat:
        if message.forward_from:
            logger.info(f"Received forwarded message from user {message.forward_from.id}")
        elif message.forward_from_chat:
            logger.info(f"Received forwarded message from chat {message.forward_from_chat.id}")
        if message.forward_date:
            logger.info(f"Forwarded message date: {message.forward_date}")
        if message.text:
            link_url_match = URL_REGEX.search(message.text)
            link_url = link_url_match.group(0) if link_url_match else None
            raw_text = message.text # –í–µ—Å—å —Ç–µ–∫—Å—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è

    if not link_url:
        logger.warning(f"No link found in message from user {message.from_user.id}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.")
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    event_time_str: Optional[str] = None
    event_time_utc: Optional[datetime] = None
    announcement_text: str = link_url # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç - —ç—Ç–æ —Å–∞–º–∞ —Å—Å—ã–ª–∫–∞

    if raw_text:
        time_match = TIME_REGEX.search(raw_text)
        if time_match:
            event_time_str = time_match.group(0)
            announcement_text = raw_text.replace(time_match.group(0), "").replace(link_url, "").strip()
            if not announcement_text: # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å
                announcement_text = link_url
        else:
            # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–µ—Ç, —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            announcement_text = raw_text.replace(link_url, "").strip()
            if not announcement_text:
                announcement_text = link_url

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –≤ –±–∞–∑—É –∫–∞–∫ 'pending'
    pending_link = await db_add_link(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name,
        link_url=link_url,
        event_time_str=event_time_str,
        event_time_utc=event_time_utc,
        announcement_text=announcement_text
    )

    if not pending_link or not pending_link.id:
        logger.error(f"Failed to create pending link for URL: {link_url} by user {user_id}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    link_id = pending_link.id
    logger.info(f"Created pending link ID: {link_id} for user {user_id}. URL: {link_url}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
    target_chats = settings.announcement_target_chats
    if not target_chats:
        logger.warning(f"No target chats configured for announcements. Link ID {link_id} remains pending.")
        await message.reply(f"–°—Å—ã–ª–∫–∞ {hlink('—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', link_url)}, –Ω–æ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return

    builder = InlineKeyboardBuilder()
    for chat in target_chats:
        builder.button(
            text=chat.name,
            callback_data=ChatSelectCallback(link_id=link_id, target_chat_id=chat.id)
        )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã?
    # builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data=ChatSelectCallback(action="cancel", link_id=link_id))
    builder.adjust(1) # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥—É

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(
        f"–ö—É–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∞–Ω–æ–Ω—Å –¥–ª—è —Å—Å—ã–ª–∫–∏: {hlink(announcement_text or link_url, link_url)}?",
        reply_markup=builder.as_markup()
    )

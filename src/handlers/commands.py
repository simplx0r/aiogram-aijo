import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message
from aiogram.enums import ChatType, ParseMode
from aiogram.utils.markdown import hbold, hitalic, hlink
from aiogram.exceptions import TelegramAPIError

from ..bot import bot
from ..config.config import settings
from ..keyboards.inline import get_link_keyboard
from ..db import database as db
from ..db.models import Link, Request
from src.utils.misc import get_random_phrase
from .. import scheduler

import re
import datetime
import pytz
from typing import Optional, List

router = Router()
ADMIN_ID = settings.admin_id
MAIN_GROUP_ID = settings.main_group_id
MAIN_TOPIC_ID = settings.main_topic_id
ZERO_WIDTH_SPACE = "\u200b"
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

TIME_REGEX = re.compile(r'^([01]\d|2[0-3]):([0-5]\d)$')

@router.message(CommandStart())
async def send_welcome(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    if message.from_user.id == settings.admin_id:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {hbold('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')}!\n"
                             f"–Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω—Å–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.\n"
                             f"–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É: `/addlink &lt;–≤—Ä–µ–º—è&gt; &lt;—Ç–µ–∫—Å—Ç_–∞–Ω–æ–Ω—Å–∞&gt; &lt;—Å—Å—ã–ª–∫–∞&gt;`\n"
                             f"–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø—Ä–æ—Å—ã: `/showrequests`\n"
                             f"–£–∑–Ω–∞—Ç—å Topic ID: `/gettopicid`")
    else:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–æ–Ω—Å–∞ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.\n"
                             "–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –∫–æ–º–∞–Ω–¥–æ–π `/addlink` –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å–æ –º–Ω–æ–π.")

@router.message(Command("addlink"), F.chat.type == ChatType.PRIVATE)
async def add_link(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /addlink <–≤—Ä–µ–º—è> <—Ç–µ–∫—Å—Ç_–∞–Ω–æ–Ω—Å–∞> <—Å—Å—ã–ª–∫–∞>"""
    if not message.text:
        await message.reply("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    command_parts = message.text.split() # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º
    usage_text = (
        "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
        f"<code>/addlink &lt;–≤—Ä–µ–º—è&gt; &lt;—Ç–µ–∫—Å—Ç_–∞–Ω–æ–Ω—Å–∞&gt; &lt;—Å—Å—ã–ª–∫–∞&gt;</code>\n"
        f"–ü—Ä–∏–º–µ—Ä: <code>/addlink 15:00 –°–æ–∑–≤–æ–Ω –ø–æ –ø—Ä–æ–µ–∫—Ç—É https://telemost.yandex.ru/j/12345</code>\n"
        f"–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ {hbold('–ú–æ—Å–∫–≤–µ')}. –¢–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞ –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å.\n"
        f"–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å {hbold('–ø–æ—Å–ª–µ–¥–Ω–∏–º')} –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º."
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É: /addlink <–≤—Ä–µ–º—è> <—Å—Å—ã–ª–∫–∞> (—Ç–µ–∫—Å—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω)
    if len(command_parts) < 3:
        await message.reply(usage_text, parse_mode=ParseMode.HTML)
        return

    # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É –ø–æ –Ω–æ–≤–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
    time_str = command_parts[1]
    link_url = command_parts[-1] # –°—Å—ã–ª–∫–∞ - –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    # –¢–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞ - –≤—Å–µ, —á—Ç–æ –º–µ–∂–¥—É –≤—Ä–µ–º–µ–Ω–µ–º –∏ —Å—Å—ã–ª–∫–æ–π
    announcement_text = " ".join(command_parts[2:-1]).strip()

    # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∞–Ω–æ–Ω—Å–∞ –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –æ–Ω –±—É–¥–µ—Ç –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π ""
    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∞–∫ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∑–∂–µ

    if not TIME_REGEX.match(time_str):
        await message.reply(
            f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: <code>{time_str}</code>. –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09:30 –∏–ª–∏ 23:59).\n"
            f"–í—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ {hbold('–ú–æ—Å–∫–≤–µ')}.",
            parse_mode=ParseMode.HTML
        )
        return

    try:
        parsed_time = datetime.datetime.strptime(time_str, "%H:%M").time()
        now_moscow = datetime.datetime.now(MOSCOW_TZ)
        # –°–æ–∑–¥–∞–µ–º datetime —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π –∏ —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –≤ –ú–°–ö
        # .replace() —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç tzinfo, –ø–æ—ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç –£–ñ–ï –±—É–¥–µ—Ç aware
        event_dt_moscow = now_moscow.replace(
            hour=parsed_time.hour,
            minute=parsed_time.minute,
            second=0,
            microsecond=0
        )

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ø—Ä–æ—à–ª–æ, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
        if event_dt_moscow <= now_moscow:
            event_dt_moscow += datetime.timedelta(days=1)
            logging.info(f"Event time {time_str} MSK is for tomorrow.")

        event_dt_utc = event_dt_moscow.astimezone(pytz.utc)
        logging.info(f"Parsed time: {time_str} MSK -> {event_dt_utc} UTC")

    except ValueError as e:
        logging.error(f"Error parsing time string '{time_str}': {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π (–ß–ß:–ú–ú).")
        return
    except Exception as e:
        logging.exception(f"Unexpected error processing time '{time_str}': {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –≤ –ë–î (–ü–ï–†–ï–î –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–Ω–æ–Ω—Å–∞)
    new_link: Optional[Link] = await db.add_link(
        message_id=None, # –ü–µ—Ä–µ–¥–∞–µ–º None, —Ç.–∫. message_id_in_group –ø–æ–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
        link_url=link_url,
        announcement_text=announcement_text, # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
        added_by_user_id=message.from_user.id,
        event_time_str=time_str,
        event_time_utc=event_dt_utc
    )

    if not new_link:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Å—ã–ª–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ê–Ω–æ–Ω—Å –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∞–Ω–æ–Ω—Å–∞ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è link_id)
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Å—ã–ª–∫–∏ Yandex Telemost –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        telemost_pattern = r'https?://telemost\.yandex\.ru/\S+'
        public_announcement_text = re.sub(telemost_pattern, '', announcement_text).strip()

        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –ò —Ç–µ–∫—Å—Ç –ò–ó–ù–ê–ß–ê–õ–¨–ù–û –±—ã–ª –ø—É—Å—Ç—ã–º,
        # —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É. –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –±—ã–ª, –Ω–æ —Å–æ–¥–µ—Ä–∂–∞–ª —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É - –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º.
        if not public_announcement_text and not announcement_text:
            public_announcement_text = "(–û–ø–∏—Å–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏)"

        keyboard = get_link_keyboard(link_id=new_link.id)
        tags = f"{ZERO_WIDTH_SPACE}#–∞–Ω–æ–Ω—Å {ZERO_WIDTH_SPACE}#—Å—Å—ã–ª–∫–∞"
        full_announcement_text = (
            f"üìÖ {hbold(event_dt_moscow.strftime('%d.%m'))} üïí {hbold(time_str)} MSK\n\n"
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –û–ß–ò–©–ï–ù–ù–´–ô —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            f"{public_announcement_text}\n\n"
            f"{tags}"
        )

        # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–æ–Ω—Å–∞ –≤ –≥—Ä—É–ø–ø—É
        announcement_msg = await bot.send_message(
            chat_id=settings.main_group_id, # –ò–°–ü–û–õ–¨–ó–£–ï–ú settings
            text=full_announcement_text,
            message_thread_id=settings.main_topic_id, # –ò–°–ü–û–õ–¨–ó–£–ï–ú settings
            reply_markup=keyboard,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=True
        )
        logging.info(f"Announcement sent for link id={new_link.id} to group {settings.main_group_id}. Message ID: {announcement_msg.message_id}")

        # –û–±–Ω–æ–≤–ª—è–µ–º message_id –≤ –ë–î –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await db.update_link_message_id(new_link.id, announcement_msg.message_id)
        logging.info(f"Updated message_id_in_group for link id={new_link.id} to {announcement_msg.message_id}")

    except Exception as e:
        logging.exception(f"Failed to send announcement for link id={new_link.id} to group {settings.main_group_id}: {e}")
        # –°—Å—ã–ª–∫–∞ —É–∂–µ –≤ –ë–î (—Å message_id=None), –Ω–æ –∞–Ω–æ–Ω—Å –Ω–µ —É—à–µ–ª.
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏ –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
        await message.reply(
            "–°—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω—Å–∞ –≤ –≥—Ä—É–ø–ø—É. "
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            parse_mode=ParseMode.HTML
        )
        return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞

    # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    await message.reply(
        f"‚úÖ –ê–Ω–æ–Ω—Å –¥–ª—è —Å—Å—ã–ª–∫–∏ <a href=\"{link_url}\">{announcement_text}</a> ({time_str} –ú–°–ö) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –≥—Ä—É–ø–ø–µ.",
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True
    )

    # –£–í–ï–õ–ò–ß–ò–í–ê–ï–ú –°–ß–ï–¢–ß–ò–ö –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    await db.increment_interview_count(
        user_id=message.from_user.id,
        username=message.from_user.username
    )
    logging.info(f"Incremented interview count for user {message.from_user.id}")

    # 6. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    try:
        await scheduler.schedule_reminders_for_link(new_link)
        logging.info(f"Scheduled reminders for link id={new_link.id}")
    except Exception as e:
         logging.exception(f"Failed to schedule reminders for link id={new_link.id}: {e}")

@router.message(Command("showrequests"), F.from_user.id == ADMIN_ID)
async def show_requests(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Å—ã–ª–æ–∫ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)."""
    logging.info(f"Admin {message.from_user.id} requested logs.")
    requests_list: List[Request] = await db.get_all_requests()

    if not requests_list:
        await message.reply("–ó–∞–ø—Ä–æ—Å—ã —Å—Å—ã–ª–æ–∫ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return

    response_lines = [f"{hbold('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã —Å—Å—ã–ª–æ–∫:')}\n"] 
    for i, req in enumerate(requests_list[:20]): 
        req_time_msk = req.requested_at.astimezone(MOSCOW_TZ)
        time_str = req_time_msk.strftime("%Y-%m-%d %H:%M:%S MSK")
        username = f"@{req.username}" if req.username else "(no username)"
        response_lines.append(
            f"{i+1}. {hitalic(time_str)}: User {req.user_id} {username} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Å—ã–ª–∫—É –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è {req.link_message_id}"
        )

    await message.answer("\n".join(response_lines), parse_mode=ParseMode.HTML)

@router.message(Command("gettopicid"), F.chat.type == ChatType.PRIVATE)
async def get_topic_id_instruction(message: Message):
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Topic ID."""
    if message.from_user.id != settings.admin_id:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await message.answer("–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —Ç–æ–ø–∏–∫–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —ç—Ç–æ–≥–æ —Ç–æ–ø–∏–∫–∞ –º–Ω–µ.")

@router.message(Command("stats"))
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    user_id = message.from_user.id
    logging.info(f"User {user_id} requested /stats")

    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
    total_messages = await db.get_total_message_count()
    total_users = await db.get_total_user_count()
    top_messengers = await db.get_top_users_by_messages(limit=5)
    top_interviewers = await db.get_top_users_by_interviews(limit=5)
    user_stats = await db.get_user_stats(user_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    stats_text = [hbold("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ß–∞—Ç–∞:")]
    stats_text.append(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    stats_text.append(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}")
    stats_text.append("\n" + hbold("üèÜ –¢–æ–ø-5 –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º:"))
    if top_messengers:
        for i, user in enumerate(top_messengers, 1):
            username = f"@{user.username}" if user.username else f"ID: {user.user_id}"
            stats_text.append(f"{i}. {username} - {user.message_count} —Å–æ–æ–±—â.")
    else:
        stats_text.append(hitalic("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö..."))

    stats_text.append("\n" + hbold("ü•á –¢–æ–ø-5 –ø–æ '—Å–æ–±–µ—Å–∞–º' (/addlink):"))
    if top_interviewers:
        for i, user in enumerate(top_interviewers, 1):
            username = f"@{user.username}" if user.username else f"ID: {user.user_id}"
            stats_text.append(f"{i}. {username} - {user.interview_count} —Å–æ–±–µ—Å.")
    else:
        stats_text.append(hitalic("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö..."))

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    stats_text.append("\n" + hbold("üë§ –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:"))
    if user_stats:
        stats_text.append(f"–°–æ–æ–±—â–µ–Ω–∏–π: {user_stats.message_count}")
        stats_text.append(f"'–°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–π': {user_stats.interview_count}")
    else:
        stats_text.append(hitalic("–í—ã –µ—â–µ –Ω–µ –ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç–µ –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Å—Å—ã–ª–∫–∏."))

    await message.reply("\n".join(stats_text), parse_mode=ParseMode.HTML)

@router.message(Command("help"))
async def help_command(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = (
        f"{hbold('‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É')} \n\n"
        f"{hbold('/start')} - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"{hbold('/addlink HH:MM —Ç–µ–∫—Å—Ç_–∞–Ω–æ–Ω—Å–∞ —Å—Å—ã–ª–∫–∞')} - –î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É —Å –∞–Ω–æ–Ω—Å–æ–º (–≤ –õ–° –±–æ—Ç—É)\n"
        f"   - {hitalic('HH:MM')} - –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è (–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ)\n"
        f"   - {hitalic('—Ç–µ–∫—Å—Ç_–∞–Ω–æ–Ω—Å–∞')} - –¢–µ–∫—Å—Ç –¥–ª—è –∞–Ω–æ–Ω—Å–∞ –≤ –≥—Ä—É–ø–ø–µ\n"
        f"   - {hitalic('—Å—Å—ã–ª–∫–∞')} - URL –≤—Å—Ç—Ä–µ—á–∏/—Ä–µ—Å—É—Ä—Å–∞\n"
        f"{hbold('/stats')} - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–∞—Ç–∞ (–≤ –õ–° –±–æ—Ç—É)\n"
        f"{hbold('/help')} - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        f"–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n"
        f"{hbold('/get_topic_id')} - –ü–æ–ª—É—á–∏—Ç—å ID —Ç–æ–ø–∏–∫–∞ (–ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞)"
    )
    await message.reply(help_text, parse_mode=ParseMode.HTML)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è get_topic_id) --- #